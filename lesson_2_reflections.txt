What happens when you initialize a repository? Why do you need to do it?

    When a repository is initialised using the "git init" command the .git
    directory is created in the current working directory

    Existing files are not automatically committed to the repository

    The .git directory will contain all the repository meta-data

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area contains files which have been marked for commit by the
    "git add" command

    These files are contained within the working directory.

    When the "git commit" command is run they will be added to repository
    contained in the ".git" directory

    The staging area provides a way of separating temporary files created during
    the development process from the more permanent project files

How can you use the staging area to make sure you have one commit per logical
change?

    The "git status" command will show files which have been modified but not
    yet staged for commit.

    Using the "git add" command it is possible to add the files related to a
    particular logical change to the staging area

    Then using the "git diff -staged" command it is possible to compare the
    changes made to the last commit.

    If these form a logical unit then it makes sense to run "git commit"

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would allow for experimentation with the program while
    leaving a working copy of the primary code

    Useful also for investigating reported bugs

How do the diagrams help you visualize the branch structure?

    The diagrams show each branch as a singly linked list of commits beginning
    with the most recent commit for that branch and ending with the initial
    commit

    Each commit only points to one previous parent commit

    Note that "merge commits" are special in that they have two parents each of
    which was the "branch tip" of the branches being merged

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    When branches are merged one branch is collapsed into another

    Select the continuing branch with "git checkount [continuing_branch_name]"

    Then merge a branch with "git merge [branch_name]"

    The redundant branch can be deleted with "git branch -d [branch_name]"

    Commits are ordered according to their timestamp in the continuing branch

    The command "git show [commit_id]" can be used to show the differences
    between a commit and its parent

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

   Automatic merging saves alot of time when changes are made to different files
   or parts of a file

   Manual merges are required when two developers change the same part of a file
   and a decision needs to be made in regards as to what should be kept
   


